<template>
  <div class="lineRanking">
    <div class="title">
      <span>货物流量流向统计</span>
      <div class="btn" @click="getDetails"></div>
    </div>
    <div class="flex-between">
      <div class="flex-start">
        <div class="labelyear">统计周期</div>
        <div class="year">
          <key-value-select :data='yearOptions' @select='selectYear'></key-value-select>
        </div>
        <div class="mouth">
          <key-value-select :data='monthOptions' @select='selectMonth'></key-value-select>
        </div>
      </div>
      <div class="flex-end">
        <div class="labeltype">货物类型</div>
        <div class="type">
          <key-value-select :data='cargoOptions' @select='selectType'></key-value-select>
        </div>
      </div>
    </div>
    <div class="goodsTjechart">
      <!-- tubiao -->
      <lineDoubleAxis v-if="cargoFlow" chartTheme="dark" :data="cargoFlow" :color="[
                        '#05d0eb',
                        '#81d9e5',
                        '#f6ffcb',
                        '#e75029',
                        '#038bfc',
                        '#006a55',
                      ]" dataZoom=false :property='property' yaxisNameL="货物量(吨)"></lineDoubleAxis>
      <loading :data='cargoFlow'></loading>
    </div>
  </div>
</template>

<script>
import { mapState, mapActions, mapMutations } from 'vuex'
import KeyValueSelect from '../../../components/KeyValueSelect'
import lineDoubleAxis from '../../../components/charts/lineDoubleAxis'
import Dictionary from '../../../util/dictionary'

const { date, cargoTypeCode } = Dictionary
export default {
  components: {
    KeyValueSelect,
    lineDoubleAxis,
  },
  computed: {
    ...mapState('manageGoodsTj', ['cargoFlow']),
    ...mapState('maintitlemsg', ['selectedEntity']),
    property() {
      const p = [
        {
          name: '货物量',
          type: 'line',
          axis: 0,
        },
        {
          name: '货物量环比',
          type: 'line',
          axis: 1,
        },
        {
          name: '货物量同比',
          type: 'line',
          axis: 1,
        },
      ]
      return p
    },
  },
  methods: {
    ...mapActions('manageGoodsTj', ['getCargoFlow']),
    ...mapMutations('popupContainer', ['getComDetails']),
    getDetails() {
      this.getComDetails('goodstj')
    },
    requestCargoFlow() {
      this.getCargoFlow({
        // entity_id: this.selectedEntity ? this.selectedEntity.entity_id : 1310000010000000,
        entity_id: this.selectedEntity && this.selectedEntity,
        year: this.year,
        month: this.month,
        cargo_type_code: this.cargo_type_code,
      })
    },
    selectType(item) {
      // console.log('type code', item.value)
      this.cargo_type_code = item.value
      this.requestCargoFlow()
    },
    selectYear(item) {
      this.year = item.value
      this.requestCargoFlow()
    },
    selectMonth(item) {
      this.month = item.value
      this.requestCargoFlow()
    },
  },
  data: () => ({
    yearOptions: date.year,
    monthOptions: date.month,
    cargoOptions: cargoTypeCode,
    year: 2017,
    month: 1,
    cargo_type_code: '03121',
  }),
}
</script>

<style lang="scss" scoped>
.lineRanking {
  width: 100%;
  height: 100%;
  .title {
    width: 568px;
    height: 25px;
    margin-bottom: 5px;
    line-height: 25px;
    background: rgba(129, 217, 229, 0.3);
    text-indent: 20px;
    font-size: 16px;
    color: #89dddf;
    position: relative;
    .btn {
      position: absolute;
      width: 20px;
      height: 6px;
      background: url("../../../assets/driver/drill_icon_on.png") no-repeat;
      top: 10px;
      right: 10px;
      cursor: pointer;
    }
  }
  .type,
  .mouth,
  .year {
    height: 25px;
    color: #b5b5b5;
    margin-left: 10px;
  }
  .type {
    width: 108px;
  }
  .year {
    width: 134px;
  }
  .mouth {
    width: 100px;
  }
  .labeltype,
  .labelyear {
    color: #b5b5b5;
  }
  .goodsTjechart {
    height: 138px;
    clear: both;
    // background: lightblue;
  }
}
</style>